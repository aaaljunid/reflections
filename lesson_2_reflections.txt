

-What happens when you initialize a repository? Why do you need to do it?
create hidden folder have name .git.
 to i save all my files on this repository and i can find it at any time and also the history of those files.

-How is the staging area different from the working directory and the repository?
What value do you think it offers?
the satage aria help to edit the files or delet it befor you commit it in the repository.
it offers one value.

-How can you use the staging area to make sure you have one commit per logical
change?
first you write command git add name_file then git status to check if it in the stage area or not.

-What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
solve the bug ,add new features and update docmintations. 
it help you to made versions, it help to modify the core code in other branch with out any change from the master cod

-How do the diagrams help you visualize the branch structure?
it help to now where is the branches and commits for the version you want to use it.

-What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
to create new version and combine all features togother which mabe made by diffrent developers.
to understand what we did and help us to know which way we are arrived.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
Git's automatic merging can save the user a lot of time!  Especially when
    multiple people are working together, merging everything manually could be
    very painful.

    The downside of automatic merging is that it's not perfect.  Merging the
    coins branch with the master branch, which included color, resulted in
    inconsistent visuals, where most items were colored but the coins were not.
    Git could even make worse mistakes - for example, if one branch deleted a
    function, and another branch added a call to that function, Git would merge
    those together with no conflict and the resulting code would be broken.

    Overall, Git's merging can save a lot of time, but it's important to always
    double check that the code still works after doing a merge.


Concept Map: init, add, staging area
We’ve introduced a few new concepts since we last revisited our concept map.

git init
git add
git status
staging area
working directory




**List of git commands :
 git init
 git status
 git log
 git diff
 git checkout
 git diff --staged
 git checkout master 
 git reset [file]
 git diff --staged
 git commit -m "the commite written here"
 git reset --hard
 git log --graph --oneline branch1 branch2
 git checkout -b new_branch_name  ====>it can do in other ways by tow step:
						====> step one ==== git branch new_branch_name.  
				  		====> step tow ==== git checkout new_branch_name.

 git gc =====> about when you can use this command:
 ======> If a branch is deleted and leaves some commits unreachable from existing branches,
 those commits will continue to be accessible by commit id, until Git’s garbage collection runs.
 This will happen automatically from time to time, unless you actively turn it off.
 You can also run this process manually with git gc.

 git branch -d branch_name =====> its only delet the name of branch 
				  but doesn't delet the commits which is inside it.
 git log -n1 >>>> it's show you the last commit.


- When i write this commands "git commit" and apear the screen to i write the message,
  How to save a git commit message from windows cmd?
Press Escape. This should make sure you are in command mode
type in :wq
then press Enter.

